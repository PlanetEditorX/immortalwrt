name: Build Immortalwrt Custom

on:
  schedule:
    - cron: '0 10 * * 1'  # 每周一的上午10点（UTC时间，对应北京时间下午6点）
  workflow_dispatch:
    inputs:
      ipaddr:
        description: '输入后台IP'
        required: true
        default: '192.168.3.100'
      gateway:
        description: '输入默认网关'
        required: true
        default: '192.168.3.1'
      version:
        description: '输入版本号,格式为X.Y.Z,为空则版本号加1'
        required: false
        default: ''

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Get latest Docker tag
        run: |
          # 通过page=2&page_size=1限制获取最新版本号，page=1&page_size=1为latest，page=2&page_size=1为X.Y.Z-c/python
          TAGS_URL="https://registry.hub.docker.com/v2/namespaces/yexundao/repositories/immortalwrt/tags?page=2&page_size=1"
          TAGS_RESPONSE=$(curl -s $TAGS_URL)
          LATEST_TAG=$(echo $TAGS_RESPONSE | jq -r '.results[] | .name' | sort -V | tail -n1 | awk -F'-' '{print $1}')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Increment version
        run: |
          # 读取最新版本号并分割为数组
          IFS='.' read -r major minor patch <<< $LATEST_TAG
          # 递增补丁版本号
          patch=$((patch + 1))
          # 如果补丁版本号达到10，重置为0并递增次版本号
          if [ $patch -eq 10 ]; then
              patch=0
              minor=$((minor + 1))
              # 如果次版本号达到10，重置为0并递增主版本号
              if [ $minor -eq 10 ]; then
                  minor=0
                  major=$((major + 1))
              fi
          fi
          # 构造新版本号
          NEW_VERSION="$major.$minor.$patch"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Show New Version
        run: echo $NEW_VERSION

      - name: Use tags or version
        id: final_tags
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "tags=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [ "${{ steps.get_version.outputs.VERSION }}" != "" ] && [ "${{ steps.get_version.outputs.VERSION }}" != "refs/heads/main" ]; then
            echo "tags=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "tags=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Download and Extract RootFS
        run: |
          mkdir -p immortalwrt
          cd immortalwrt
          wget -O rootfs_amd64.tar.gz https://downloads.immortalwrt.org/releases/24.10.0-rc3/targets/x86/64/immortalwrt-24.10.0-rc3-x86-64-rootfs.tar.gz
          wget -O rootfs_arm64.tar.gz https://downloads.immortalwrt.org/releases/24.10.0-rc3/targets/armsr/armv8/immortalwrt-24.10.0-rc3-armsr-armv8-rootfs.tar.gz
          gzip -d rootfs_amd64.tar.gz
          gzip -d rootfs_arm64.tar.gz

      - name: Move rootfs.tar.gz to build context
        run: |
          mkdir -p ./src/amd64
          mkdir -p ./src/arm64
          mv immortalwrt/rootfs_amd64.tar ./src/amd64/rootfs.tar
          mv immortalwrt/rootfs_arm64.tar ./src/arm64/rootfs.tar

      - name: Build initial Docker image
        run: |
          cp ./src/Dockerfile ./src/amd64
          cp ./src/Dockerfile ./src/arm64
          docker build -t immortalwrt:initial-amd64 ./src/amd64

      - name: Run container and modify amd64
        run: |
          docker run -d --name immortalwrt-amd64 immortalwrt:initial-amd64 /bin/sh -c "while true; do sleep 1000; done"
          docker exec immortalwrt-amd64 sh -c "cat <<EOF > /etc/config/network
            config interface 'loopback'
            	option device 'lo'
            	option proto 'static'
            	option ipaddr '127.0.0.1'
            	option netmask '255.0.0.0'
            
            config interface 'lan'
            	option proto 'static'
            	option netmask '255.255.255.0'
            	option ip6assign '60'
            	option ipaddr '${{ github.event.inputs.ipaddr }}'
            	option gateway '${{ github.event.inputs.gateway }}'
            	option dns '223.5.5.5 1.1.1.1'
            	option device 'eth0'
            EOF"
          docker commit immortalwrt-amd64 immortalwrt:initial-amd64
          
      - name: Push modified Docker image amd64
        run: |
          docker tag immortalwrt:initial-amd64 ${{ secrets.DOCKER_USERNAME }}/immortalwrt:${{ steps.final_tags.outputs.tags }}-amd
          docker push ${{ secrets.DOCKER_USERNAME }}/immortalwrt:${{ steps.final_tags.outputs.tags }}-amd
          docker tag immortalwrt:initial-amd64 ${{ secrets.DOCKER_USERNAME }}/immortalwrt:amd
          docker push ${{ secrets.DOCKER_USERNAME }}/immortalwrt:amd

      - name: Build ARM Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: ./src/arm64
          file: ./src/arm64/Dockerfile
          platforms: linux/arm64
          tags: immortalwrt:initial-arm64
          push: false  # 不推送镜像

      - name: List local Docker images
        run: docker images
    
      - name: Ensure Docker image exists
        run: |
          if ! docker image inspect immortalwrt:initial-arm64 &> /dev/null; then
            echo "Image 'immortalwrt:initial-arm64' not found. Rebuilding..."
            docker build -t immortalwrt:initial-arm64 --platform linux/arm64 ./src/arm64
          fi
      
      - name: Run container in immortalwrt-arm64
        run: |
          docker run -d --name immortalwrt-arm64 --platform linux/arm64 --privileged immortalwrt:initial-arm64 /bin/sh -c "while true; do sleep 1000; done"

      - name: Ensure /var/lock directory exists in immortalwrt-arm64
        run: |
          docker exec immortalwrt-arm64 sh -c "mkdir -p /var/lock"
    
      - name: Modify network configuration in immortalwrt-arm64
        run: |
          docker exec immortalwrt-arm64 sh -c "cat <<EOF > /etc/config/network
            config interface 'loopback'
            	option device 'lo'
            	option proto 'static'
            	option ipaddr '127.0.0.1'
            	option netmask '255.0.0.0'
            
            config interface 'lan'
            	option proto 'static'
            	option netmask '255.255.255.0'
            	option ip6assign '60'
            	option ipaddr '${{ github.event.inputs.ipaddr }}'
            	option gateway '${{ github.event.inputs.gateway }}'
            	option dns '223.5.5.5 1.1.1.1'
            	option device 'eth0'
            EOF"

      - name: Install packages in immortalwrt-arm64
        run: |
          docker exec immortalwrt-arm64 sh -c "opkg update; \
          opkg install luci-i18n-ttyd-zh-cn; \
          opkg install luci-i18n-filebrowser-go-zh-cn; \
          opkg install luci-i18n-argon-config-zh-cn; \
          opkg install openssh-sftp-server"

      - name: Download and run imm.sh
        run: |
          docker exec immortalwrt-arm64 sh -c "wget -qO imm.sh https://cafe.cpolar.top/wkdaily/zero3/raw/branch/main/zero3/imm.sh && chmod +x imm.sh && ./imm.sh"

      - name: Install luci-i18n-quickstart-zh-cn
        run: |
          docker exec immortalwrt-arm64 sh -c "/tmp/is-opkg opkg install luci-i18n-quickstart-zh-cn"
    
      - name: Commit modified container
        run: |
          docker commit immortalwrt-arm64 immortalwrt:initial-arm64
          
      - name: Push modified Docker image arm64
        run: |
          docker tag immortalwrt:initial-arm64 ${{ secrets.DOCKER_USERNAME }}/immortalwrt:arm
          docker push ${{ secrets.DOCKER_USERNAME }}/immortalwrt:arm
          docker tag immortalwrt:initial-arm64 ${{ secrets.DOCKER_USERNAME }}/immortalwrt:${{ steps.final_tags.outputs.tags }}-arm
          docker push ${{ secrets.DOCKER_USERNAME }}/immortalwrt:${{ steps.final_tags.outputs.tags }}-arm
          docker tag immortalwrt:initial-arm64 ${{ secrets.DOCKER_USERNAME }}/immortalwrt:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/immortalwrt:latest
          
          
