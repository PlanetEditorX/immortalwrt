name: Build Immortalwrt Custom

on:
  schedule:
    - cron: '0 18 * * 1'  # 每周一的下午 6 点（UTC 时间）
  workflow_dispatch:
    inputs:
      version:
        description: '输入版本号,格式为X.Y.Z,为空则版本号加1'
        required: false
        default: ''
      ipaddr:
        description: '输入后台IP'
        required: true
        default: '192.168.3.100'
      gateway:
        description: '输入默认网关'
        required: true
        default: '192.168.3.1'
      platform:
        description: '选择目标平台 (amd64 或 arm64)'
        required: true
        default: 'arm64'
jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Get latest Docker tag
        run: |
          # 通过page=2&page_size=1限制获取最新版本号，page=1&page_size=1为latest，page=2&page_size=1为X.Y.Z-c/python
          TAGS_URL="https://registry.hub.docker.com/v2/namespaces/yexundao/repositories/immortalwrt/tags?page=2&page_size=1"
          TAGS_RESPONSE=$(curl -s $TAGS_URL)
          LATEST_TAG=$(echo $TAGS_RESPONSE | jq -r '.results[] | .name' | sort -V | tail -n1 | awk -F'-' '{print $1}')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Increment version
        run: |
          # 读取最新版本号并分割为数组
          IFS='.' read -r major minor patch <<< $LATEST_TAG
          # 递增补丁版本号
          patch=$((patch + 1))
          # 如果补丁版本号达到10，重置为0并递增次版本号
          if [ $patch -eq 10 ]; then
              patch=0
              minor=$((minor + 1))
              # 如果次版本号达到10，重置为0并递增主版本号
              if [ $minor -eq 10 ]; then
                  minor=0
                  major=$((major + 1))
              fi
          fi
          # 构造新版本号
          NEW_VERSION="$major.$minor.$patch"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Show New Version
        run: echo $NEW_VERSION

      - name: Use tags or version
        id: final_tags
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "tags=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [ "${{ steps.get_version.outputs.VERSION }}" != "" ] && [ "${{ steps.get_version.outputs.VERSION }}" != "refs/heads/main" ]; then
            echo "tags=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "tags=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: yexundao/immortalwrt
          tags: |
                type=raw,value=${{ steps.final_tags.outputs.tags }}
                type=raw,value=latest

      - name: Download and Extract RootFS
        run: |
          mkdir -p imm
          cd imm
          if [ "${{ github.event.inputs.platform }}" == "amd64" ]; then
            wget -O rootfs.tar.gz https://downloads.immortalwrt.org/releases/24.10.0-rc3/targets/x86/64/immortalwrt-24.10.0-rc3-x86-64-rootfs.tar.gz
          elif [ "${{ github.event.inputs.platform }}" == "arm64" ]; then
            wget -O rootfs.tar.gz https://downloads.immortalwrt.org/releases/24.10.0-rc3/targets/armsr/armv8/immortalwrt-24.10.0-rc3-armsr-armv8-rootfs.tar.gz
          else
            echo "Unsupported platform: ${{ github.event.inputs.platform }}"
            exit 1
          fi
          gzip -d rootfs.tar.gz

      - name: Move rootfs.tar.gz to build context
        run: mv imm/rootfs.tar ./src/

      - name: Build initial Docker image
        run: |
          docker build -t immortalwrt:initial ./src

      - name: Run container and modify
        run: |
          docker run -d --name immortalwrt immortalwrt:initial /bin/sh -c "while true; do sleep 1000; done"
          docker exec immortalwrt sh -c "cat <<EOF > /etc/config/network
            config interface 'loopback'
            	option device 'lo'
            	option proto 'static'
            	option ipaddr '127.0.0.1'
            	option netmask '255.0.0.0'
            
            config interface 'lan'
            	option proto 'static'
            	option netmask '255.255.255.0'
            	option ip6assign '60'
            	option ipaddr '${{ github.event.inputs.ipaddr }}'
            	option gateway '${{ github.event.inputs.gateway }}'
            	option dns '223.5.5.5 1.1.1.1'
            	option device 'eth0'
            EOF"
          docker commit immortalwrt immortalwrt:modified
          
      - name: Push modified Docker image
        run: |
          docker tag immortalwrt:modified ${{ secrets.DOCKER_USERNAME }}/immortalwrt:${{ steps.meta.outputs.tags }}
          docker push ${{ secrets.DOCKER_USERNAME }}/immortalwrt:${{ steps.meta.outputs.tags }}
          
